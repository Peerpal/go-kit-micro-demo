// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/watermark/watermark.proto

package watermarkconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	watermark "micro_demo/api/v1/watermark"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// WatermarkName is the fully-qualified name of the Watermark service.
	WatermarkName = "pb.Watermark"
)

// WatermarkClient is a client for the pb.Watermark service.
type WatermarkClient interface {
	Get(context.Context, *connect_go.Request[watermark.GetRequest]) (*connect_go.Response[watermark.GetReply], error)
	Watermark(context.Context, *connect_go.Request[watermark.WatermarkRequest]) (*connect_go.Response[watermark.WatermarkReply], error)
	Status(context.Context, *connect_go.Request[watermark.StatusRequest]) (*connect_go.Response[watermark.StatusReply], error)
	AddDocument(context.Context, *connect_go.Request[watermark.AddDocumentRequest]) (*connect_go.Response[watermark.AddDocumentReply], error)
	ServiceStatus(context.Context, *connect_go.Request[watermark.ServiceStatusRequest]) (*connect_go.Response[watermark.ServiceStatusReply], error)
}

// NewWatermarkClient constructs a client for the pb.Watermark service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWatermarkClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) WatermarkClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &watermarkClient{
		get: connect_go.NewClient[watermark.GetRequest, watermark.GetReply](
			httpClient,
			baseURL+"/pb.Watermark/Get",
			opts...,
		),
		watermark: connect_go.NewClient[watermark.WatermarkRequest, watermark.WatermarkReply](
			httpClient,
			baseURL+"/pb.Watermark/Watermark",
			opts...,
		),
		status: connect_go.NewClient[watermark.StatusRequest, watermark.StatusReply](
			httpClient,
			baseURL+"/pb.Watermark/Status",
			opts...,
		),
		addDocument: connect_go.NewClient[watermark.AddDocumentRequest, watermark.AddDocumentReply](
			httpClient,
			baseURL+"/pb.Watermark/AddDocument",
			opts...,
		),
		serviceStatus: connect_go.NewClient[watermark.ServiceStatusRequest, watermark.ServiceStatusReply](
			httpClient,
			baseURL+"/pb.Watermark/ServiceStatus",
			opts...,
		),
	}
}

// watermarkClient implements WatermarkClient.
type watermarkClient struct {
	get           *connect_go.Client[watermark.GetRequest, watermark.GetReply]
	watermark     *connect_go.Client[watermark.WatermarkRequest, watermark.WatermarkReply]
	status        *connect_go.Client[watermark.StatusRequest, watermark.StatusReply]
	addDocument   *connect_go.Client[watermark.AddDocumentRequest, watermark.AddDocumentReply]
	serviceStatus *connect_go.Client[watermark.ServiceStatusRequest, watermark.ServiceStatusReply]
}

// Get calls pb.Watermark.Get.
func (c *watermarkClient) Get(ctx context.Context, req *connect_go.Request[watermark.GetRequest]) (*connect_go.Response[watermark.GetReply], error) {
	return c.get.CallUnary(ctx, req)
}

// Watermark calls pb.Watermark.Watermark.
func (c *watermarkClient) Watermark(ctx context.Context, req *connect_go.Request[watermark.WatermarkRequest]) (*connect_go.Response[watermark.WatermarkReply], error) {
	return c.watermark.CallUnary(ctx, req)
}

// Status calls pb.Watermark.Status.
func (c *watermarkClient) Status(ctx context.Context, req *connect_go.Request[watermark.StatusRequest]) (*connect_go.Response[watermark.StatusReply], error) {
	return c.status.CallUnary(ctx, req)
}

// AddDocument calls pb.Watermark.AddDocument.
func (c *watermarkClient) AddDocument(ctx context.Context, req *connect_go.Request[watermark.AddDocumentRequest]) (*connect_go.Response[watermark.AddDocumentReply], error) {
	return c.addDocument.CallUnary(ctx, req)
}

// ServiceStatus calls pb.Watermark.ServiceStatus.
func (c *watermarkClient) ServiceStatus(ctx context.Context, req *connect_go.Request[watermark.ServiceStatusRequest]) (*connect_go.Response[watermark.ServiceStatusReply], error) {
	return c.serviceStatus.CallUnary(ctx, req)
}

// WatermarkHandler is an implementation of the pb.Watermark service.
type WatermarkHandler interface {
	Get(context.Context, *connect_go.Request[watermark.GetRequest]) (*connect_go.Response[watermark.GetReply], error)
	Watermark(context.Context, *connect_go.Request[watermark.WatermarkRequest]) (*connect_go.Response[watermark.WatermarkReply], error)
	Status(context.Context, *connect_go.Request[watermark.StatusRequest]) (*connect_go.Response[watermark.StatusReply], error)
	AddDocument(context.Context, *connect_go.Request[watermark.AddDocumentRequest]) (*connect_go.Response[watermark.AddDocumentReply], error)
	ServiceStatus(context.Context, *connect_go.Request[watermark.ServiceStatusRequest]) (*connect_go.Response[watermark.ServiceStatusReply], error)
}

// NewWatermarkHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWatermarkHandler(svc WatermarkHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/pb.Watermark/Get", connect_go.NewUnaryHandler(
		"/pb.Watermark/Get",
		svc.Get,
		opts...,
	))
	mux.Handle("/pb.Watermark/Watermark", connect_go.NewUnaryHandler(
		"/pb.Watermark/Watermark",
		svc.Watermark,
		opts...,
	))
	mux.Handle("/pb.Watermark/Status", connect_go.NewUnaryHandler(
		"/pb.Watermark/Status",
		svc.Status,
		opts...,
	))
	mux.Handle("/pb.Watermark/AddDocument", connect_go.NewUnaryHandler(
		"/pb.Watermark/AddDocument",
		svc.AddDocument,
		opts...,
	))
	mux.Handle("/pb.Watermark/ServiceStatus", connect_go.NewUnaryHandler(
		"/pb.Watermark/ServiceStatus",
		svc.ServiceStatus,
		opts...,
	))
	return "/pb.Watermark/", mux
}

// UnimplementedWatermarkHandler returns CodeUnimplemented from all methods.
type UnimplementedWatermarkHandler struct{}

func (UnimplementedWatermarkHandler) Get(context.Context, *connect_go.Request[watermark.GetRequest]) (*connect_go.Response[watermark.GetReply], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("pb.Watermark.Get is not implemented"))
}

func (UnimplementedWatermarkHandler) Watermark(context.Context, *connect_go.Request[watermark.WatermarkRequest]) (*connect_go.Response[watermark.WatermarkReply], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("pb.Watermark.Watermark is not implemented"))
}

func (UnimplementedWatermarkHandler) Status(context.Context, *connect_go.Request[watermark.StatusRequest]) (*connect_go.Response[watermark.StatusReply], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("pb.Watermark.Status is not implemented"))
}

func (UnimplementedWatermarkHandler) AddDocument(context.Context, *connect_go.Request[watermark.AddDocumentRequest]) (*connect_go.Response[watermark.AddDocumentReply], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("pb.Watermark.AddDocument is not implemented"))
}

func (UnimplementedWatermarkHandler) ServiceStatus(context.Context, *connect_go.Request[watermark.ServiceStatusRequest]) (*connect_go.Response[watermark.ServiceStatusReply], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("pb.Watermark.ServiceStatus is not implemented"))
}
